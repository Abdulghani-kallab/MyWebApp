// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyWebApp.Data.Concrete.EntityFramework.Contexts;

namespace MyWebApp.Data.Migrations
{
    [DbContext(typeof(MyWebAppContext))]
    [Migration("20220326184215_Test4")]
    partial class Test4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("MyWebApp.Entities.Concrete.AboutMe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MyCVPath")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MyJob")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("MyJobFA")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("AboutMe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthDate = new DateTime(2022, 3, 26, 21, 42, 14, 317, DateTimeKind.Local).AddTicks(4663),
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 317, DateTimeKind.Local).AddTicks(5123),
                            FirstName = "Fatih",
                            ImagePath = "",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "ÖZYURT",
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 317, DateTimeKind.Local).AddTicks(5419),
                            MyCVPath = "",
                            MyJob = "fırat üniversitesinde Doç. Dr",
                            MyJobFA = "<i class=\"fas fa - laptop - code\"></i>",
                            Note = "InitialCreate"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SQAnswerHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SecurituQuestion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 319, DateTimeKind.Local).AddTicks(7338),
                            Email = "fatihozyurt@firat.edu.tr",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 319, DateTimeKind.Local).AddTicks(7343),
                            Note = "InitialCreate",
                            PasswordHash = "C863FB7DD9E5A18B8F142DB629FA563A",
                            SQAnswerHash = "fb01c2637b1583bd8e911f6ff47017c7",
                            SecurituQuestion = "Anne kızlık soyadı (küçük harflerle)?"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("ShortContent")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 324, DateTimeKind.Local).AddTicks(5991),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 324, DateTimeKind.Local).AddTicks(6001),
                            Note = "InitialCreate",
                            SeoDescription = "C# 9.0 ve .Net 5.0 Yenilikleri",
                            SeoTags = "C#, C#9, .NET5",
                            ShortContent = "Test of Article",
                            Thumbnail = "",
                            Title = "C# 9.0 ve .Net 5.0 Yenilikleri",
                            ViewsCount = 0
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryFA")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryFA = "<i class=\"fas fa - code\"></i>",
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 325, DateTimeKind.Local).AddTicks(7582),
                            Description = "Yazılım ile ilgili güncel bilgiler içerir.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 325, DateTimeKind.Local).AddTicks(7592),
                            Name = "Yazılım",
                            Note = "InitialCreate"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleId = 1,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 327, DateTimeKind.Local).AddTicks(2143),
                            FirstName = "Fatih",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "ÖZYURT",
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 327, DateTimeKind.Local).AddTicks(2152),
                            Note = "C# Blog Gönderisi",
                            Text = "Bu bir deneme yorumudur. Lütfen dikkate almayınız!"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.ContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LongAdress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("ShortAdress")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ContactInfo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 328, DateTimeKind.Local).AddTicks(6392),
                            Email = "fatihozyurt@firat.edu.tr",
                            IsActive = true,
                            IsDeleted = false,
                            LongAdress = "sürüsürü Mah Daire 10/5",
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 328, DateTimeKind.Local).AddTicks(6404),
                            Note = "InitialCreate",
                            PhoneNumber = "04242370005585",
                            ShortAdress = "Elazığ/Turkey"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Education", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Avarage")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Educations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Avarage = "2.65 GANO",
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 330, DateTimeKind.Local).AddTicks(1979),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Exercitationem recusandae quibusdam expedita, vitae veniam aut",
                            Duration = "Eylül 2018--Devam Ediyor",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 330, DateTimeKind.Local).AddTicks(1987),
                            Note = "InitialCreate",
                            School = "Firat Üniversitesi-yazılım Müh",
                            Title = "Doktroa Derecesi"
                        },
                        new
                        {
                            Id = 2,
                            Avarage = "81.63 ORT",
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 330, DateTimeKind.Local).AddTicks(1997),
                            Description = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Exercitationem recusandae quibusdam expedita, vitae veniam aut",
                            Duration = "Eylül 2012--Temmuz 2016",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 330, DateTimeKind.Local).AddTicks(1998),
                            Note = "InitialCreate",
                            School = "Türkan Halit Aykılıç Fen Lisesi-Fen Bilimleri",
                            Title = "Lise Mezun"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Workplace")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 331, DateTimeKind.Local).AddTicks(4755),
                            Description = "Haziran 2020'den beridir",
                            Duration = "Haziran 2020--Devam Ediyor",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 331, DateTimeKind.Local).AddTicks(4763),
                            Note = "InitialCreate",
                            Title = "Freelance Web Developer",
                            Workplace = "Freelance"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.HomePageSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("HomePageSliders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 332, DateTimeKind.Local).AddTicks(7186),
                            IsActive = true,
                            IsDeleted = false,
                            LongDescription = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur. Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir.",
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 332, DateTimeKind.Local).AddTicks(7195),
                            Note = "InitialCreate",
                            ShortDescription = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır.",
                            Title = ".NET DEVELOPER"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 332, DateTimeKind.Local).AddTicks(7204),
                            IsActive = true,
                            IsDeleted = false,
                            LongDescription = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur. Yaygın inancın tersine, Lorem Ipsum rastgele sözcüklerden oluşmaz. Kökleri M.Ö. 45 tarihinden bu yana klasik Latin edebiyatına kadar uzanan 2000 yıllık bir geçmişi vardır. Virginia'daki Hampden-Sydney College'dan Latince profesörü Richard McClintock, bir Lorem Ipsum pasajında geçen ve anlaşılması en güç sözcüklerden biri olan 'consectetur' sözcüğünün klasik edebiyattaki örneklerini incelediğinde kesin bir kaynağa ulaşmıştır. Lorm Ipsum, Çiçero tarafından M.Ö. 45 tarihinde kaleme alınan \"de Finibus Bonorum et Malorum\" (İyi ve Kötünün Uç Sınırları) eserinin 1.10.32 ve 1.10.33 sayılı bölümlerinden gelmektedir. Bu kitap, ahlak kuramı üzerine bir tezdir ve Rönesans döneminde çok popüler olmuştur. Lorem Ipsum pasajının ilk satırı olan \"Lorem ipsum dolor sit amet\" 1.10.32 sayılı bölümdeki bir satırdan gelmektedir.",
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 332, DateTimeKind.Local).AddTicks(7206),
                            Note = "InitialCreate",
                            ShortDescription = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır.",
                            Title = "WEB DEVELOPER"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Interested", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Interesteds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 333, DateTimeKind.Local).AddTicks(7319),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 333, DateTimeKind.Local).AddTicks(7327),
                            Note = "InitialCreate",
                            Text = "Bilgisayar Donanımları, Bileşenleri ve Yazılımları"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 333, DateTimeKind.Local).AddTicks(7336),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 333, DateTimeKind.Local).AddTicks(7337),
                            Note = "InitialCreate",
                            Text = "Vizyon Filmlerini takip etmek ve izlemek, Film incelemelerini okumak, Parodileri izlemek"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 333, DateTimeKind.Local).AddTicks(7341),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 333, DateTimeKind.Local).AddTicks(7342),
                            Note = "InitialCreate",
                            Text = "Animeler ve Mangalar"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 335, DateTimeKind.Local).AddTicks(435),
                            Email = "deneme@mail.com",
                            FirstName = "Mehmet",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Şevket",
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 335, DateTimeKind.Local).AddTicks(442),
                            Note = "InitialCreate",
                            Subject = "deneme",
                            Text = "Bu bir deneme mesajıdır. Dikkate almayınız!"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.SiteIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LogoFA")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LogoText")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SiteIdentity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 336, DateTimeKind.Local).AddTicks(4300),
                            Description = "Ben Fatih ÖZYURT Yazılım geliştiricisiyim. C#, python ve web bilgim var.",
                            IsActive = true,
                            IsDeleted = false,
                            Keywords = "Fatih ÖZYURT, Fatih,ÖZYURT, Software, Developer, Engineer",
                            LogoFA = "<i class=\"fab fa - hire - a - helper\"></i>",
                            LogoText = "Fatih ÖZYURT",
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 336, DateTimeKind.Local).AddTicks(4308),
                            Note = "InitialCreate",
                            Title = "Fatih ÖZYURT"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PercentageValue")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 337, DateTimeKind.Local).AddTicks(6010),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 337, DateTimeKind.Local).AddTicks(6018),
                            Note = "InitialCreate",
                            PercentageValue = 70,
                            Title = "C#"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 337, DateTimeKind.Local).AddTicks(6027),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 337, DateTimeKind.Local).AddTicks(6028),
                            Note = "InitialCreate",
                            PercentageValue = 60,
                            Title = "ASP.NET MVC"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 337, DateTimeKind.Local).AddTicks(6032),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 337, DateTimeKind.Local).AddTicks(6033),
                            Note = "InitialCreate",
                            PercentageValue = 60,
                            Title = "ENTITY FRAMEWORK & LINQ"
                        },
                        new
                        {
                            Id = 4,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 337, DateTimeKind.Local).AddTicks(6037),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 337, DateTimeKind.Local).AddTicks(6038),
                            Note = "InitialCreate",
                            PercentageValue = 65,
                            Title = "HTML & CSS"
                        },
                        new
                        {
                            Id = 5,
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 337, DateTimeKind.Local).AddTicks(6041),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 337, DateTimeKind.Local).AddTicks(6042),
                            Note = "InitialCreate",
                            PercentageValue = 50,
                            Title = "DEVEXPRESS FRAMEWORK"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.SocialMediaAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccountFA")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AccountUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("SocialMediaAccounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountFA = "<i class=\"fab fa - facebook - square\"></i>",
                            AccountUrl = "https://www.facebook.com",
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 338, DateTimeKind.Local).AddTicks(8211),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 338, DateTimeKind.Local).AddTicks(8218),
                            Note = "InitialCreate"
                        },
                        new
                        {
                            Id = 2,
                            AccountFA = "<i class=\"fab fa - twitter - square\"></i>",
                            AccountUrl = "https://twitter.com",
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 338, DateTimeKind.Local).AddTicks(8227),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 338, DateTimeKind.Local).AddTicks(8229),
                            Note = "InitialCreate"
                        },
                        new
                        {
                            Id = 3,
                            AccountFA = "<i class=\"fab fa - linkedin\"></i>",
                            AccountUrl = "https://www.linkedin.com",
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 338, DateTimeKind.Local).AddTicks(8232),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 338, DateTimeKind.Local).AddTicks(8234),
                            Note = "InitialCreate"
                        },
                        new
                        {
                            Id = 4,
                            AccountFA = "<i class=\"fab fa - github - square\"></i>",
                            AccountUrl = "https://github.com",
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 338, DateTimeKind.Local).AddTicks(8237),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 338, DateTimeKind.Local).AddTicks(8238),
                            Note = "InitialCreate"
                        },
                        new
                        {
                            Id = 5,
                            AccountFA = "<i class=\"fab fa - youtube\"></i>",
                            AccountUrl = "https://www.youtube.com",
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 338, DateTimeKind.Local).AddTicks(8242),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 338, DateTimeKind.Local).AddTicks(8243),
                            Note = "InitialCreate"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Summary");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Merhaba siteme hoşgeldiniz. Ben Fatih ÖZYURT.",
                            CreatedByName = "InitialCreate",
                            CreatedTime = new DateTime(2022, 3, 26, 21, 42, 14, 339, DateTimeKind.Local).AddTicks(7744),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedTime = new DateTime(2022, 3, 26, 21, 42, 14, 339, DateTimeKind.Local).AddTicks(7752),
                            Note = "InitialCreate"
                        });
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Article", b =>
                {
                    b.HasOne("MyWebApp.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("MyWebApp.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("MyWebApp.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");
                });
#pragma warning restore 612, 618
        }
    }
}
